# Environment variables
language: c
cache: ccache
os: linux
dist: bionic
osx_image: xcode11.2
env: build_type=release
git:
  depth: 5
  quiet: true
  submodules: false
addons:
  apt:
    sources:
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main"
        key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
    packages:
      - cmake
      - yasm
      - valgrind
      - libgstreamer-plugins-base1.0-dev
      - libgstreamer1.0-dev
      - python3-pip
  homebrew:
    packages:
      - yasm
      - ccache
      - python
notifications:
  webhooks: https://coveralls.io/webhook

# Pipeline stages
stages:
  - name: style
  - name: test
  - name: coveralls+valgrind
    if: type != pull_request
  - name: unittest

# Default scripts
before_install:
  - "sudo chown -R travis: $HOME/.ccache"
  - |
    if [ "$(uname -s)" == "Darwin" ]; then
      sysctl -n machdep.cpu.brand_string
      sysctl machdep.cpu.features
      sysctl machdep.cpu.leaf7_features
    elif [ -f "/proc/cpuinfo" ]; then
      grep -Ei " sse*| ssse*| avx|model name" /proc/cpuinfo  | sort -u
    fi
  - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig PATH="/usr/local/opt/ccache/libexec:$PATH"
  - cd $TRAVIS_BUILD_DIR
  - wget -nc https://raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master/video.tar.gz || wget -nc http://randomderp.com/video.tar.gz
  - tar xf video.tar.gz
  - mkdir -p $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
  - |
    case "$CC" in
    gcc-7) sudo apt-get install -qq gcc-7 g++-7 ;;
    gcc-8) sudo apt-get install -qq gcc-8 g++-8 ;;
    gcc-9) sudo apt-get install -qq gcc-9 g++-9 ;;
    clang-6.0) sudo apt-get install -qq clang-6.0 ;;
    clang-10) sudo apt-get install -qq clang-10 ;;
    esac
    if [ "$TRAVIS_OS_NAME" != "osx" ]; then
      test -f "/usr/lib/ccache/${CC##*/}" || sudo ln -s /usr/bin/ccache /usr/lib/ccache/${CC##*/}
      test -f "/usr/lib/ccache/${CXX##*/}" || sudo ln -s /usr/bin/ccache /usr/lib/ccache/${CXX##*/}
    fi
install:
  - |
    if [ "$TRAVIS_OS_NAME" != "osx" ]; then
      export CFLAGS="-Werror"
      if [ "$CC" = "clang" ]; then export CFLAGS+=" -Wno-error=array-bounds"; fi
    fi
script:
  - &base_script |
    cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
    cmake $TRAVIS_BUILD_DIR -G"${generator:-Unix Makefiles}" -DCMAKE_BUILD_TYPE=${build_type:-Release} ${CMAKE_EFLAGS}
    cmake -j $(if [ $TRAVIS_OS_NAME = osx ]; then sysctl -n hw.ncpu; else nproc; fi) --build . &&
    sudo cmake --build . --target install && cd $TRAVIS_BUILD_DIR
  - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3
  - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 150
  - SvtAv1EncApp -enc-mode 0 -i Chimera-Aerial_480x270_2997fps_10bit_420_150frames.y4m -n 3
  - SvtAv1EncApp -enc-mode 8 -i Chimera-Aerial_480x270_2997fps_10bit_420_150frames.y4m -n 150
before_cache:
  - "sudo chown -R travis: $HOME/.ccache"
  - ccache -c
  - ccache -s

# Build matrix
matrix:
  fast_finish: true
  allow_failures:
    - name: Binary Identical?
    - name: Valgrind
    - name: Coveralls Linux+gcc
    - name: Coveralls osx+clang
    - name: Unit Tests Linux+gcc
    - name: Unit Tests osx+clang
    # Exclude these because if the encoder can run with a release build, the commit is probably fine. Also required for fast_finish.
  include:
    # Coding style check
    - name: Style check
      stage: style
      addons: skip
      before_install: skip
      install: skip
      script:
        - |
          echo "Checking for tabs"
          ! git grep -InP --heading "\t" -- . ':!third_party/**/*'
          echo "Checking for carriage returns"
          ! git grep -InP --heading "\r" -- . ':!third_party/**/*'
          echo "Checking for trailing spaces"
          ! git grep -InP --heading " $" -- . ':!third_party/**/*';
        - git fetch -q https://github.com/OpenVisualCloud/SVT-AV1.git master
        - |
          for file in $(git diff --name-only FETCH_HEAD |
            grep -vE "third_party/|test/e2e_test/test_vector_list.txt|test/vectors/smoking_test.cfg|test/vectors/video_src.cfg|.png"); do
            if [ -n "$(tail -c1 "$file")" ]; then
              echo "No newline at end of $file"
              false
            fi
          done
        - |
          for i in $(git rev-list HEAD ^FETCH_HEAD); do
            echo "Checking commit message of $i"
            msg="$(git log --format=%B -n 1 $i)"
            if [ -n "$(sed -n 2p <<<"$msg")" ]; then
              echo "Malformed commit message in $i, second line must be empty"
              false
            fi
            if head -1 <<<"$msg" | grep -q '\.$'; then
              echo "Malformed commit message in $i, trailing period in subject line"
              false
            fi
          done
    # GCC & Clang builds
    - name: macOS Clang build
      os: osx
      compiler: clang
